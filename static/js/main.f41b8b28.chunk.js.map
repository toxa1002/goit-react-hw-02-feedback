{"version":3,"sources":["components/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css","components/Button/Button.module.css"],"names":["Button","buttonName","onClick","className","s","button","type","FeedbackOptions","buttonNames","onLeaveFeedback","buttomList","map","buttton","item","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","MockButtonFeadback","App","state","counterFeadbacks","e","target","textContent","setState","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"wRAgBeA,MAbf,YAA0C,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QAC1B,OACI,wBAAQC,UAAWC,IAAEC,OAAQH,QAASA,EAASI,KAAK,SAApD,SACKL,KCkBEM,MAnBf,YAA4D,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,gBACpC,OACI,oBAAIN,UAAWC,IAAEM,WAAjB,SACKF,EAAYG,KAAI,SAAAC,GAAO,OACpB,oBAAkBT,UAAWC,IAAES,KAA/B,SACI,cAAC,EAAD,CACIZ,WAAYW,EACZV,QAASO,KAHRG,SCMVE,MAbf,YAAkD,IAA/BX,EAA8B,EAA9BA,UAAWY,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OACI,0BAASb,UAAWA,EAApB,UACI,6BAAKY,IACJC,MCgBEC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,qCACI,wCAAWJ,EAAX,OACA,2CAAcC,EAAd,OACA,uCAAUC,EAAV,OACA,wCAAWC,KACX,qDAAwBC,EAAxB,WCJNC,EAAqB,CAAC,OAAQ,UAAW,OAEzCC,E,4MAIFC,MAAQ,CACJP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETM,iBAAmB,SAAAC,GACc,SAAzBA,EAAEC,OAAOC,YACT,EAAKC,SAAS,CAAEZ,KAAM,EAAKO,MAAMP,KAAO,IACR,YAAzBS,EAAEC,OAAOC,YAChB,EAAKC,SAAS,CAAEX,QAAS,EAAKM,MAAMN,QAAU,IACd,QAAzBQ,EAAEC,OAAOC,aAChB,EAAKC,SAAS,CAAEV,IAAK,EAAKK,MAAML,IAAM,K,4CAI9C,WACI,MAA+BW,KAAKN,MAA5BP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBY,EAAqBd,EAAOC,EAAUC,EACtCa,EAAkCC,KAAKC,MACjC,IAAPjB,EAAcc,GAEnB,OACI,gCACI,cAAC,EAAD,CAASjB,MAAM,wBAAf,SAMI,cAAC,EAAD,CACIP,YAAae,EACbd,gBAAiBsB,KAAKL,qBAG9B,cAAC,EAAD,CAASX,MAAM,aAAf,SACKiB,EACG,cAAC,EAAD,CACId,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,EACPV,mBAAoBW,IAGxB,6B,GAhDNG,aAAZZ,EACKa,aAAe,CAClBJ,gCAAiC,GAsD1BT,QC1Dfc,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,kBCR5BC,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,8BAA8B,WAAa,sC,kBCA7GD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,8B","file":"static/js/main.f41b8b28.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nfunction Button({ buttonName, onClick }) {\n    return (\n        <button className={s.button} onClick={onClick} type=\"button\">\n            {buttonName}\n        </button>\n    );\n}\n\nButton.propTypes = {\n    buttonName: PropTypes.string,\n    onClick: PropTypes.func,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\nimport Button from '../Button';\n\n\nfunction FeedbackOptions({ buttonNames, onLeaveFeedback }) {\n    return (\n        <ul className={s.buttomList}>\n            {buttonNames.map(buttton => (\n                <li key={buttton} className={s.item}>\n                    <Button\n                        buttonName={buttton}\n                        onClick={onLeaveFeedback}\n                    ></Button>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nFeedbackOptions.propTypes = {\n    buttonName: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Section({ className, title, children }) {\n    return (\n        <section className={className}>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    );\n}\n\nSection.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n            <p>Good : {good} </p>\n            <p>Neutral : {neutral} </p>\n            <p>Bad : {bad} </p>\n            <p>Total: {total}</p>\n            <p>Positive feedback : {positivePercentage}%</p>\n        </>\n    );\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n\nconst MockButtonFeadback = ['Good', 'Neutral', 'Bad'];\n\nclass App extends Component {\n    static defaultProps = {\n        countPositiveFeedbackPercentage: 0,\n    };\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n    counterFeadbacks = e => {\n        if (e.target.textContent === 'Good') {\n            this.setState({ good: this.state.good + 1 });\n        } else if (e.target.textContent === 'Neutral') {\n            this.setState({ neutral: this.state.neutral + 1 });\n        } else if (e.target.textContent === 'Bad') {\n            this.setState({ bad: this.state.bad + 1 });\n        }\n    };\n\n    render() {\n        const { good, neutral, bad } = this.state;\n        const countTotalFeedback = good + neutral + bad;\n        const countPositiveFeedbackPercentage = Math.round(\n            (good * 100) / countTotalFeedback,\n        );\n        return (\n            <div>\n                <Section title=\"Please leave feedback\">\n                    {/* <FeedbackOptions\n                        // key={but}\n                        onLeaveFeedback={this.counterFeadbacks}\n                    /> */}\n\n                    <FeedbackOptions\n                        buttonNames={MockButtonFeadback}\n                        onLeaveFeedback={this.counterFeadbacks}\n                    />\n                </Section>\n                <Section title=\"Statistics\">\n                    {countTotalFeedback ? (\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={countTotalFeedback}\n                            positivePercentage={countPositiveFeedbackPercentage}\n                        />\n                    ) : (\n                        'No feedback given'\n                    )}\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__Eb0Qi\",\"item\":\"FeedbackOptions_item__1AxOK\",\"buttomList\":\"FeedbackOptions_buttomList__34bVu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1P4cT\",\"buttomList\":\"Button_buttomList__3Md6D\"};"],"sourceRoot":""}